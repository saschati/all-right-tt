@use '@/styles/core/functions' as f;
@use '@/styles/core/mixin' as m;
@use '@/styles/core/helpers' as h;
@use '@/styles/core/config' as c;
@use 'sass:list' as list;

@mixin btn-color($name, $bg, $tc: white) {
  &_#{$name} {
    --_btn-bg-color: #{f.color(#{$bg})};
    --_btn-color: #{f.color(#{$tc})};
  }
}

.btn {
  // Setting component section
  --_btn-bg-color: #{f.color(black)};
  --_btn-color: #{f.color(white)};
  --_btn-padding: 15px 20px 14px 20px;
  --_btn-height: 48px;
  --_btn-anim-speed: 250ms;
  --_btn-size: #{f.size(16px)};
  --_btn-lh: #{f.lh(19.36px)};
  --_btn-ta: center;
  --_btn-w: 600;
  --_btn-ws: nowrap;
  --_btn-ls: 0.1em;
  --_btn-bs: 1px;

  background: f.v(_btn-bg-color);
  color: f.v(_btn-color);

  width: 100%;
  height: f.v(_btn-height);
  padding: f.v(_btn-padding);
  border-radius: 5px;

  @include m.text(f.v(_btn-size), $lh: f.v(_btn-lh), $ta: f.v(_btn-ta), $w: f.v(_btn-w), $ls: f.v(_btn-ls));
  @include m.font(base);

  white-space: f.v(_btn-ws);

  cursor: pointer;
  transition: f.v(_btn-anim-speed);

  // ACTION
  &:hover {
    color: f.v(_btn-bg-color);
    background: transparent;
    box-shadow: 0 0 0 f.v(_btn-bs) f.v(_btn-bg-color);
  }

  // COLOR
  &_color {
    @each $name in c.colors(name) {
      $text: 'white';

      @if h.to-string($name) == $text {
        $text: 'black';
      }

      @include btn-color($name, $name, $text);
    }

    // Custom
    &_physalis-gradient {
      --_btn-bg-color: linear-gradient(156deg, #fe9a3e 9.79%, #ea7101 90.85%);

      &:hover {
        color: #fe9a3e;
        box-shadow: 0 0 0 f.v(_btn-bs) #fe9a3e;
      }
    }
  }

  &:disabled {
    background: #{f.color(gray-2)};
    cursor: not-allowed;

    &:hover {
      color: f.color(white);
      box-shadow: 0 0 0 f.v(_btn-bs) f.color(gray-2);
    }
  }
}
